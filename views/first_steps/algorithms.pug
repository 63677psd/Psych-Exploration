extends /templates/simulation-template

block title
	- const title = "Algorithms"

block required_scripts
	- const required_scripts = ["01knapsack.js", "algorithms-sketch.js"];

block nav_info
	- const current_page = "First Steps";
	- const prev_page = {name: "Introduction", link: "/intro"};
	- const next_page = {name: "Heuristics", link: "/heuristics"};

block summary
	p An algorithm is a step by step process to solve a problem.  As far back as ancient Greece, mathematical algorithms have existed.  However, the use of algorithms has exploded since the invention of the computer.  To solve any problem, a programmer needs to give the computer a set of instructions to execute.  Computer scientists are continually inventing more complex algorithms, but the overall concept of an algorithm remains the same.  Computers that execute algorithms to solve problems could be seen as simulating a very limited form of intelligence because they are processing inputs in a certain way to find an output.  However, all the actual problem solving must be done by a programmer beforehand and then implemented for the computer.  Computers are very good at using algorithms quickly and without error, which makes algorithms crucial for solving many types of problems.
	p The simulation below demonstrates a computer using an algorithm to solve the "0-1 knapsack problem."  For this problem, imagine a robber who broke into a store overnight.  The robber has a backpack to put items in, but can only carry so much total weight.  Each item has a price tag and the robber wants to maximize the total cost of all items in their backpack.  So, the problem is: how does the robber pick items to maximize the total value of items in their backpack without exceeding the weight limit.

block instructions
	.col.fw-bold Click the boxes to try the 0-1 knapsack problem yourself. Press "Solve" to run the algorithm and find a solution that maximizes the total value. Pressing the refresh button will generate new boxes.
	.col-3.d-flex.justify-content-center
		.btn-toolbar
			button.btn.btn-primary.m-2(onclick="solve()") Solve
			button.btn.btn-warning.m-2.p-1(onclick="restart_sketch()")
				i.bi.bi-arrow-repeat.h4